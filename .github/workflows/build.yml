name: Test, build, deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master
      - develop
    tags:
      - v-*
env:
  CI: true
  DEV_REF: heads/develop
  STAGING_REF: heads/master
  PRODUCTION_REF: tags/v-*
  REVIEW_ENVIRONMENT: review
  DEVELOPMENT_ENVIRONMENT: development
  STAGING_ENVIRONMENT: staging
  PRODUCITON_ENVIRONMENT: production
  env_development: ${{secrets.env_development}}
  env_review: ${{secrets.env_review}}
  env_staging: ${{secrets.env_staging}}
  env_production: ${{secrets.env_production}}
  GCLOUD_AUTH: ${{ secrets.GCP_SA_KEY }}
  GAE_PROJECT: ${{ secrets.GAE_PROJECT }}
  GAE_SERVICE: ${{ secrets.GAE_SERVICE }}
  TF_VARS: ${{ secrets.tf_env_vars }} # js object of tf env vars to put into a varfile
  TF_IN_AUTOMATION: "true"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  dependencies:
    name: Install and cache dependencies
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v1"
      - name: Use Node.js 13
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        # if: steps.cache-deps.outputs.cache-hit != 'true'

  test:
    name: Run test suite
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v1"
      - name: Use Node.js 13
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        # if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Run tests
        run: yarn test-ci
      - name: Upload Test Report
        uses: actions/upload-artifact@v1
        with:
          name: code-test-report
          path: test-results.xml
    # - name: Upload coverage
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: code-coverage-report
    #     path: coverage

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Use Node.js 13
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        # if: steps.cache-deps.outputs.cache-hit != 'true'
      - name: Lint code
        run: yarn lint

  build:
    name: Build project
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Use Node.js 13
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        # if: steps.cache-deps.outputs.cache-hit != 'true'
      - uses: actions/cache@v1
        id: cache-build
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Build project
        run: yarn run build
      - name: Archive build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: ./.github/actions/select-environment
        name: Selects the environment for deployment
        id: select-deploy
        with:
          google-credentials: ${{ secrets.GCP_SA_KEY }}
          google-credentials-encoded: true
          debug: true
      - name: TF init
        working-directory: ./terraform
        run: terraform init -backend-config="bucket=$TF_VAR_gcp_state_bucket_name" -backend-config="credentials=./credentials-decoded.json"
      - name: TF validate
        working-directory: ./terraform
        run: terraform validate
      - name: TF Plan
        working-directory: ./terraform
        run: terraform plan -out=tf.plan
      - name: Upload TF Plan artifact
        uses: actions/upload-artifact@v1
        with:
          name: tf.plan
          path: ${{github.workspace}}/terraform/tf.plan

  deploy:
    name: Create Github Deployment
    runs-on: ubuntu-latest
    needs: [build, terraform-plan]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install
        # if: steps.cache-deps.outputs.cache-hit != 'true'
      - uses: actions/cache@v1
        id: cache-build
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Build project
        run: yarn run build
        if: steps.cache-build.outputs.cache-hit != 'true'
      - uses: ./.github/actions/select-environment
        name: Selects the environment for deployment
        id: select-deploy
        with:
          google-credentials: ${{ secrets.GCP_SA_KEY }}
          google-credentials-encoded: true
          debug: true
      - name: Download TF Plan
        uses: actions/download-artifact@v1
        with:
          name: tf.plan
          path: ${{github.workspace}}/terraform
      - name: TF init
        working-directory: ./terraform
        run: terraform init -backend-config="bucket=$TF_VAR_gcp_state_bucket_name" -backend-config="credentials=./credentials-decoded.json"
      - name: TF apply
        working-directory: ./terraform
        run: terraform apply tf.plan
      - uses: actions/github-script@0.4.0
        name: Create Deployment in github
        if: success()
        with:
          github-token: ${{github.token}}
          script: |
            let sourceRef = context.ref;
            if (context.eventName === 'pull_request') {
              sourceRef = context.payload.pull_request.head.ref
            }
            const description = `Environment for ${sourceRef}`
            const environment = JSON.parse(process.env.TARGET_ENV);
            const options = {
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              ref: sourceRef,
              environment: environment.name,
              environment_url: process.env.ENV_URL,
              production_environment: environment.production,
              transient_environment: environment.transient,
              description,
              required_contexts: [],
              mediaType: { previews: ['ant-man', 'flash'] },
              payload: { flags: process.env.DEPLOY_FLAGS },
            };
            let deploymentResponse = await github.repos.createDeployment(options);
            let deployment = deploymentResponse.data;
            if (deployment.message && deployment.message.indexOf('Auto-merged') !== -1)  {
              deploymentResponse = await github.repos.createDeployment(options);
              deployment = deploymentResponse.data;
            }
            console.info(`::set-env name=DEPLOYMENT_ID::${deployment.id}`);
      - uses: actions/github-script@0.2.0
        if: success()
        name: Set deployment to "In progress" in Github
        with:
          github-token: ${{github.token}}
          script: |
            const environment = JSON.parse(process.env.TARGET_ENV);
            await github.repos.createDeploymentStatus({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: "in_progress",
              auto_inactive: environment.auto_inactive,
              mediaType: { previews: ['ant-man', 'flash'] }
            })
      - name: Configure GCloud
        if: success()
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "275.0.0"
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Deploy via gcloud app deploy
        if: success()
        run: "gcloud components install beta --quiet && gcloud beta app deploy $DEPLOY_FLAGS"
      - name: Create deploy status (failure)
        uses: actions/github-script@0.2.0
        if: failure()
        with:
          github-token: ${{github.token}}
          script: |
            const environment = JSON.parse(process.env.TARGET_ENV);
            await github.repos.createDeploymentStatus({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: "failure",
              auto_inactive: environment.auto_inactive,
              mediaType: { previews: ['ant-man', 'flash'] }
            })
      - name: Create deploy status (success)
        uses: actions/github-script@0.2.0
        if: success()
        with:
          github-token: ${{github.token}}
          script: |
            const environment = JSON.parse(process.env.TARGET_ENV);
            await github.repos.createDeploymentStatus({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              deployment_id: process.env.DEPLOYMENT_ID,
              environment_url: process.env.ENV_URL,
              state: "success",
              auto_inactive: environment.auto_inactive,
              mediaType: { previews: ['ant-man', 'flash'] }
            })
            if (environment.name === process.env.REVIEW_ENVIRONMENT && context.payload.number) {
              const commentPrefix = 'The code in this PR can be reached at'
              const body = `${commentPrefix} ${process.env.ENV_URL}`
              // get comments
              const commentResponse = await github.issues.listComments({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                issue_number: context.payload.number,
                per_page: 20,
              })
              const comments = commentResponse.data
              const hasCommented = comments.find(c => c.body.indexOf(commentPrefix) !== -1)
              console.info('have we commented with deploy url?', hasCommented)
              if (!hasCommented) {
                // create comment with link to deployment.octokit.({
                await github.issues.createComment({
                  owner: context.payload.repository.owner.login,
                  repo: context.payload.repository.name,
                  issue_number: context.payload.number,
                  body,
                })
              } else {
                await github.issues.updateComment({
                  owner: context.payload.repository.owner.login,
                  repo: context.payload.repository.name,
                  issue_number: context.payload.number,
                  comment_id: hasCommented.id,
                  body
                })
              }
            }
      - name: Create deploy status (cancelled)
        uses: actions/github-script@0.2.0
        if: cancelled()
        with:
          github-token: ${{github.token}}
          script: |
            const environment = JSON.parse(process.env.TARGET_ENV);
            await github.repos.createDeploymentStatus({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: "cancelled",
              auto_inactive: environment.auto_inactive,
            })

  publish:
    name: Run test suite
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          registry-url: https://npm.pkg.github.com
          node-version: 13
          scope: "@svaj"
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        # if: steps.cache-deps.outputs.cache-hit != 'true'
      - run: yarn release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
